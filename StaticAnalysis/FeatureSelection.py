import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_classif


# ----------------------------------------------------------------------------------------------------------------------
# Functions

def df_cor(df, method):
    cor_res = df.corr(method)
    features = cor_res.columns.tolist()
    count = 0
    for i in features:
        for j in features:
            if (cor_res.loc[i][j] >= 0.3) or (cor_res.loc[i][j] <= -0.3):
                count += 1
    return (count * 100) / (len(features) ** 2)


def prepare_res_tab(benign_addr, malware_addr):
    resources_section_malware = pd.read_csv(malware_addr)
    resources_section_benign = pd.read_csv(benign_addr)

    resources_section_malware = resources_section_malware.drop('Fonts', 1)
    resources_section_benign = resources_section_benign.drop('Fonts', 1)

    features = ['Cursors', 'Bitmaps', 'Icons', 'Menus', 'Dialogs', 'Strings', 'Group Cursors', 'Group Icons']

    nullDf_malware = pd.DataFrame(np.zeros((1400, 8)), columns=features)
    nullDf_benign = pd.DataFrame(np.zeros((1715, 8)), columns=features)

    resources_section_malware = resources_section_malware.append(nullDf_malware, ignore_index=True)
    resources_section_benign = resources_section_benign.append(nullDf_benign, ignore_index=True)

    resources_section_malware = resources_section_malware.assign(
        Target=["Malware" for i in range(resources_section_malware.shape[0])])
    resources_section_benign = resources_section_benign.assign(
        Target=["Benign" for i in range(resources_section_benign.shape[0])])

    resources_section = pd.concat([resources_section_benign, resources_section_malware], ignore_index=True)

    return resources_section


def prepare_tabs(benign_tab_addr, malware_tab_addr):
    benignDf = pd.read_csv(benign_tab_addr)
    benignDf = benignDf.assign(Target=["Benign" for i in range(benignDf.shape[0])])

    malwareDf = pd.read_csv(malware_tab_addr)
    malwareDf = malwareDf.assign(Target=["Malware" for i in range(malwareDf.shape[0])])

    resultDf = pd.concat([benignDf, malwareDf], axis=0, ignore_index=True)
    resultDf = resultDf[:].replace(['-'], 0)

    return resultDf


def create_size_featuresDF(*addrs):
    sizeDf = pd.DataFrame()
    targetDf = pd.DataFrame()
    appended_dfs = list()

    for tuple in addrs:
        current_df = prepare_tabs(tuple[0], tuple[1])
        targetDf = current_df['Target']
        current_df_processed = current_df[[column for column in current_df.columns
                                           if not column.rfind("Size") == -1]]
        appended_dfs.append(current_df_processed)

    appended_dfs = pd.concat(appended_dfs, axis=1)

    sizeDf = pd.concat([appended_dfs, targetDf], axis=1)
    sizeDf = sizeDf[:].replace(['-'], 0)

    return sizeDf


def feature_importance(X, y, color):
    model = ExtraTreesClassifier()
    model.fit(X, y)
    # plot graph of feature importances for better visualization
    feat_importances = pd.Series(model.feature_importances_, index=X.columns)
    feat_importances.nlargest(10).plot(kind='barh',color=color)
    plt.show()

    return feat_importances.nlargest(10).keys().tolist()


def f_test(X, y):
    # define feature selection
    fs = SelectKBest(score_func=f_classif, k=2)
    # apply feature selection
    X_selected = fs.fit(X, y)
    dfscores = pd.DataFrame(X_selected.scores_)
    dfcolumns = pd.DataFrame(X.columns)
    # concat two dataframes for better visualization
    featureScores = pd.concat([dfcolumns, dfscores], axis=1)
    featureScores.columns = ['Feature', 'Score']
    print(featureScores.nlargest(10, 'Score'))

    feature_scores = pd.Series(X_selected.scores_, index=X.columns)
    feature_scores.nlargest(10).plot(kind='barh', color='green')
    plt.show()

    return feature_scores.nlargest(10).keys().tolist()


# ----------------------------------------------------------------------------------------------------------------------
# Resources_section table

# resources_section = prepare_res_tab(
#     "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/benign/resources_section__for_benignware.csv"
#     , "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/malicious/resources_section__for_malware.csv")

resources_section = prepare_res_tab(
    'D:/pythonProject/MalwareAnalysis/Parser/Tables for benignware/resources_section_for_benignware.csv'
    , 'D:/pythonProject/MalwareAnalysis/Parser/Tables for malware/resources_section_for_malware.csv')

resources_section.head(50)

df_cor(resources_section, 'pearson')

x = resources_section.iloc[:, 0:len(resources_section.columns) - 1]
y = resources_section.loc[:, ['Target']].values
len(x)

# #Standardize the Data
# x = StandardScaler().fit_transform(x)
# pd.DataFrame(data = x, columns = features)


# PCA Projection to 2D
pca = PCA(n_components=2)
principalComponents = pca.fit_transform(x)
principal_resource_section = pd.DataFrame(data=principalComponents, columns=['Principal component 1',
                                                                             'Principal component 2'])
targetDf = pd.DataFrame(data=y, columns=["Target"])

result__resource_sectionDf = pd.concat([principal_resource_section, targetDf], axis=1)
result__resource_sectionDf.head(20)

# Visualize 2D Projection
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(1, 1, 1)
# ax = plt.axes(projection='3d')
ax.set_xlabel('Principal Component 2', fontsize=15)
ax.set_ylabel('Principal Component 1', fontsize=15)
ax.set_title('2 Component PCA', fontsize=20)

targets = ['Malware', 'Benign']
colors = ['r', 'g']
for target, color in zip(targets, colors):
    indicesToKeep = result__resource_sectionDf['Target'] == target
    ax.scatter(result__resource_sectionDf.loc[indicesToKeep, 'Principal component 1']
               , result__resource_sectionDf.loc[indicesToKeep, 'Principal component 2']
               , c=color
               , s=90)
ax.legend(targets)
ax.grid()

plt.show()

# Explained Variance
print("PCA explained variance: " + str(pca.explained_variance_ratio_[0]) + " "
      + str(pca.explained_variance_ratio_[1]))

# ----------------------------------------------------------------------------------------------------------------------
# Features related to size

# sizeDf = create_size_featuresDF((
#                                 "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/benign/optional_header_feaures_for_benignware.csv",
#                                 "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/malicious/optional_header_feaures_for_malware.csv")
#                                 , (
#                                 "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/benign/coff_header_feaures_for_benignware.csv",
#                                 "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/malicious/coff_header_feaures_for_malware.csv")
#                                 , (
#                                 "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/benign/section_header_data_features__for_benignware.csv",
#                                 "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/malicious/section_header_data_features__for_malware.csv")
#                                 , (
#                                 "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/benign/optional_header_data_directory__for_benignware.csv",
#                                 "D:/studying/Rhein-Waal Uni/1st semester/Project research A/tables/malicious/optional_header_data_directory__for_malware.csv"))


sizeDf = create_size_featuresDF((
                                'D:/pythonProject/MalwareAnalysis/Parser/Tables for benignware/optional_header_feaures_for_benignware.csv',
                                'D:/pythonProject/MalwareAnalysis/Parser/Tables for malware/optional_header_feaures_for_malware.csv')
                                , (
                                'D:/pythonProject/MalwareAnalysis/Parser/Tables for benignware/coff_header_feaures_for_benignware.csv',
                                'D:/pythonProject/MalwareAnalysis/Parser/Tables for malware/coff_header_feaures_for_malware.csv')
                                , (
                                'D:/pythonProject/MalwareAnalysis/Parser/Tables for benignware/section_header_data_features_for_benignware.csv',
                                'D:/pythonProject/MalwareAnalysis/Parser/Tables for malware/section_header_data_features_for_malware.csv')
                                , (
                                'D:/pythonProject/MalwareAnalysis/Parser/Tables for benignware/optional_header_data_directory__for_benignware.csv',
                                'D:/pythonProject/MalwareAnalysis/Parser/Tables for malware/optional_header_data_directory__for_malware.csv'))

# Correlation between input columns
print(df_cor(sizeDf, 'pearson'))

# Applying Feature Importance method
X = sizeDf.iloc[:, 0:len(sizeDf.columns) - 2]  # independent columns
y = sizeDf.iloc[:, -1]  # target column
y = y.astype('str')

feat_importances_list = feature_importance(X, y, 'blue')

# Applying F-test method
feat_scores_list = f_test(X,y)

# Selected features from sizeDf dataframe
feat_scores_list_as_set = set(feat_scores_list)
intersection = feat_scores_list_as_set.intersection(feat_importances_list)
intersection_list = list(intersection)
print(intersection_list)

result_sizeDf = pd.DataFrame()
for column in sizeDf.columns:
    for selected_feature in intersection_list:
        if column == selected_feature:
            result_sizeDf[selected_feature] = sizeDf[column]

# result_sizeDf['Target'] = sizeDf['Target']

# ----------------------------------------------------------------------------------------------------------------------
# Entropy table

section_headerDf = prepare_tabs('D:/pythonProject/MalwareAnalysis/Parser/Tables for benignware/section_header_data_features_for_benignware.csv'
                               ,'D:/pythonProject/MalwareAnalysis/Parser/Tables for malware/section_header_data_features_for_malware.csv')

entropyDf = section_headerDf[[column for column in section_headerDf.columns
                                                        if not column.rfind("entropy") == -1]]


# ----------------------------------------------------------------------------------------------------------------------
# Final table

selected_featuresDf = pd.concat([entropyDf, result_sizeDf,result__resource_sectionDf], axis=1)

X = selected_featuresDf.iloc[:,0:len(selected_featuresDf.columns)-2]  #independent columns
y = selected_featuresDf.iloc[:,-1]    #target column
y=y.astype('str')

feat_importances_list = feature_importance(X,y,'red')

selected_featuresDf.to_csv('D:/pythonProject/MalwareAnalysis/StaticAnalysis/Final table/Features.csv', index=False)

